###call_os_module_add_time.cpp
#include <linux/init.h>
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/ktime.h>
#include <linux/delay.h>

MODULE_LICENSE("Dual BSD/GPL");

extern int (*fptr_Operation)(int*,int,int,char*);

struct timeval tstart,tend;

static int call_os4_module_init(void)
{
    printk("call_os4_module_init...\n");

    do_gettimeofday(&tstart);
    const int count=25000000;
    int result;
    int i;
    for(i=0;i<count;i++)
    {
        char op_add='+';
        fptr_Operation(&result,10,10,&op_add);
    }

    for(i=0;i<count;i++)
    {
        char op_sub='-';
        fptr_Operation(&result,20,10,&op_sub);
    }

    for(i=0;i<count;i++)
    {
        char op_mul='*';
        fptr_Operation(&result,10,10,&op_mul);
    }

    for(i=0;i<count;i++)
    {
        char op_div='\\';
        fptr_Operation(&result,20,10,&op_div);
    }

    do_gettimeofday(&tend);
    printk("total time:%ld millisec\n",1000*(tend.tv_sec-tstart.tv_sec)+(tend.tv_usec-tstart.tv_usec)/1000);
    return 0;
}

static void call_os4_module_exit(void)
{
    printk("call_os4_module_exit...\n");
    return;
}
module_init(call_os4_module_init);
module_exit(call_os4_module_exit);




###makefile###
obj-m:=call_os4_module_add_time.o
CURRENT_PATH :=$(shell pwd)
VERSION_NUM :=$(shell uname -r)
LINUX_PATH :=/usr/src/linux-headers-$(VERSION_NUM)
all :
	make -C $(LINUX_PATH) M=$(CURRENT_PATH) modules
	rm *.order *.mod.c *.o *.symvers
clean :
	make -C $(LINUX_PATH) M=$(CURRENT_PATH) clean


###os4_module.cpp
#include <linux/init.h>
#include <linux/module.h>
#include <linux/kernel.h>

MODULE_LICENSE("Dual BSD/GPL");

int ASMD_Operation(int* result,int num1,int num2,char* op)
{
    if(op)
    {
        if(*op == '+')
        {
            *result = num1 + num2;
        }
        else if(*op == '-')
        {
            *result = num1 - num2;
        }
        else if(*op == '*')
        {
            *result = num1*num2;
        }
        else if(*op == '\\')
        {
            if(num2!=0)
                *result = num1/num2;
            else
                printk("dived number can't be zero!\n");
        }else
            printk("unrecongized operator %c\n", *op);
    }else
    {
        printk("operation is empty.\n");
}

    return 0;
}

int (*fptr_Operation)(int*,int,int,char*);

static int os4_init(void)
{
    //static int (*fptr_ASMD_Operation)(int*,int,int,char*);
    printk(KERN_ALERT"os4 init...\n");
    fptr_Operation=&ASMD_Operation;
    return 0;
}
static void os4_exit(void)
{
    printk(KERN_ALERT"os4 exit...\n");
}
EXPORT_SYMBOL(fptr_Operation);

module_init(os4_init);
module_exit(os4_exit);




###makefile
obj-m:=os4_module.o
CURRENT_PATH :=$(shell pwd)
VERSION_NUM :=$(shell uname -r)
LINUX_PATH :=/usr/src/linux-headers-$(VERSION_NUM)
all :
	make -C $(LINUX_PATH) M=$(CURRENT_PATH) modules
	rm *.order *.mod.c *.o *.symvers
clean :
	make -C $(LINUX_PATH) M=$(CURRENT_PATH) clean

